import <std_connector.camkes>;

import "components/ChanMux/ChanMux.camkes";
import "components/NwStack/network_stack.camkes";
import "components/UART/Uart.camkes";
import "components/Timer/Timer.camkes";
import "components/TimerClient/TimerClient.camkes";
import "components/TlsRpcServer/TlsRpcServer.camkes";

import "components/Tests/test_OS_Tls.camkes";

#include "NIC_ChanMux/NIC_ChanMux.camkes"
DECLARE_COMPONENT_NIC_ChanMux(NwDriver_1)
DECLARE_COMPONENT_NIC_ChanMux(NwDriver_2)


assembly {
    composition {
        //----------------------------------------------------------------------
        // MUX
        //----------------------------------------------------------------------
        component ChanMux           chanMux;

        //----------------------------------------------------------------------
        // UART
        //----------------------------------------------------------------------
        component  UartDev          uartDev;
        component  UartDrv          uartDrv;

        connection seL4HardwareMMIO uart_memio          (from uartDrv.uartRegBase,    to uartDev.uartRegBase);
        connection seL4RPCCall      uart_chanmux        (from uartDrv.Output,         to chanMux.ChanMuxOut);
        connection seL4RPCCall      chanmux_uart        (from chanMux.Output,         to uartDrv.UartDrv);
        connection seL4SharedData   uart_dataConnection (from chanMux.outputDataPort, to uartDrv.inputDataPort);

        //----------------------------------------------------------------------
        // Timer
        //----------------------------------------------------------------------
        component  Timerbase             timerBase;
        component  Timer                 timer;
        component  TimerClient           timerClient;

        connection seL4HardwareMMIO      timer_mem            (from timer.reg,         to timerBase.reg);
        connection seL4HardwareInterrupt timer_irq            (from timerBase.irq,     to timer.irq);
        connection seL4RPCCall           timerClient_timer    (from timerClient.Timer, to timer.Timer);
        connection seL4RPCCall           nwStack_timerClient  (from nwStack_1.Timer,   to timerClient.TimerClient);
        connection seL4RPCCall           nwStack2_timerClient (from nwStack_2.Timer,   to timerClient.TimerClient);

        //----------------------------------------------------------------------
        // Network Driver #1
        //----------------------------------------------------------------------
        component  NwDriver_1       nwDriver_1;

        connection seL4Notification NwDriver_Chanmux_dataAvail       (from chanMux.event_nic_1_hasData,        to nwDriver_1.chanMux_event_hasData);
        connection seL4RPCCall      nwDriver_chanmux                 (from nwDriver_1.ChanMuxRpc,              to chanMux.ChanMux_driver);
        connection seL4SharedData   NwDriver_Chanmux_port_ctrl       (from nwDriver_1.chanMux_port_ctrl,       to chanMux.port_nic_1_ctrl);
        connection seL4SharedData   NwDriver_Chanmux_port_data_read  (from nwDriver_1.chanMux_port_data_read,  to chanMux.port_nic_1_data_read);
        connection seL4SharedData   NwDriver_Chanmux_port_data_write (from nwDriver_1.chanMux_port_data_write, to chanMux.port_nic_1_data_write);

        //----------------------------------------------------------------------
        // Network Stack #1
        //----------------------------------------------------------------------
        component  NwStack_1              nwStack_1;

        connection seL4NotificationNative NwStackdataAvail2 (from nwStack_1.event_internal, to nwStack_1.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1 (from nwStack_1.e_write,        to nwStack_1.c_write);
        connection seL4Notification       NwStackEventsRxd2 (from nwStack_1.e_read,         to nwStack_1.c_read);
        connection seL4Notification       NwStackEventsRxd3 (from nwStack_1.e_conn,         to nwStack_1.c_conn);

        connection seL4NotificationNative NwStackdataAvail3 (from timerClient.e_timeout_nwstacktick_1, to nwStack_1.event_tick_or_data);

        connection seL4NotificationNative NwStackdataAvail1                (from nwDriver_1.nic_event_hasData,     to nwStack_1.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver                 (from nwStack_1.nic_driver,             to nwDriver_1.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection  (from nwDriver_1.nic_port_to,           to nwStack_1.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection (from nwDriver_1.nic_port_from,         to nwStack_1.port_nic_to);

        //----------------------------------------------------------------------
        // Network Stack App #1
        //----------------------------------------------------------------------
        component  test_OS_Tls      unitTest;

        connection seL4Notification NwAppInitDone        (from nwStack_1.event_network_init_done,  to unitTest.event_network_stack_init_done);
        connection seL4RPCCall      NwApp_nwStack        (from unitTest.network_stack_rpc,         to nwStack_1.network_stack_rpc);
        connection seL4SharedData   NwApp_dataConnection (from unitTest.NwAppDataPort,             to nwStack_1.port_app_io);

        //----------------------------------------------------------------------
        // Network Driver #2
        //----------------------------------------------------------------------
        component  NwDriver_2       nwDriver_2;

        connection seL4Notification NwDriver_Chanmux_dataAvail_2       (from chanMux.event_nic_2_hasData,        to nwDriver_2.chanMux_event_hasData);
        connection seL4RPCCall      nwDriver_chanmux_2                 (from nwDriver_2.ChanMuxRpc,              to chanMux.ChanMux_driver);
        connection seL4SharedData   NwDriver_Chanmux_port_ctrl_2       (from nwDriver_2.chanMux_port_ctrl,       to chanMux.port_nic_2_ctrl);
        connection seL4SharedData   NwDriver_Chanmux_port_data_read_2  (from nwDriver_2.chanMux_port_data_read,  to chanMux.port_nic_2_data_read);
        connection seL4SharedData   NwDriver_Chanmux_port_data_write_2 (from nwDriver_2.chanMux_port_data_write, to chanMux.port_nic_2_data_write);

        //----------------------------------------------------------------------
        // Network Stack #2
        //----------------------------------------------------------------------
        component  NwStack_1              nwStack_2;

        connection seL4NotificationNative NwStackdataAvail2_2 (from nwStack_2.event_internal, to nwStack_2.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1_2 (from nwStack_2.e_write,        to nwStack_2.c_write);
        connection seL4Notification       NwStackEventsRxd2_2 (from nwStack_2.e_read,         to nwStack_2.c_read);
        connection seL4Notification       NwStackEventsRxd3_2 (from nwStack_2.e_conn,         to nwStack_2.c_conn);

        connection seL4NotificationNative NwStackdataAvail3_2 (from timerClient.e_timeout_nwstacktick_2,  to nwStack_2.event_tick_or_data);

        connection seL4NotificationNative NwDriver_NwStack_dataAvail_2       (from nwDriver_2.nic_event_hasData,     to nwStack_2.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver_2                 (from nwStack_2.nic_driver,             to nwDriver_2.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection_2  (from nwDriver_2.nic_port_to,           to nwStack_2.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection_2 (from nwDriver_2.nic_port_from,         to nwStack_2.port_nic_to);

        //----------------------------------------------------------------------
        // Network Stack App #2
        //----------------------------------------------------------------------
        component  TlsRpcServer     tlsRpcServer;

        connection seL4Notification NwAppInitDone_2        (from nwStack_2.event_network_init_done,     to tlsRpcServer.event_network_stack_init_done);
        connection seL4RPCCall      NwApp_nwStack_2        (from tlsRpcServer.network_stack_rpc,        to nwStack_2.network_stack_rpc);
        connection seL4SharedData   NwApp_dataConnection_2 (from tlsRpcServer.NwAppDataPort,            to nwStack_2.port_app_io);

        //----------------------------------------------------------------------
        // Connecting TEST_TLS to tlsRpcServer
        //----------------------------------------------------------------------
        connection seL4RPCCall      testTls_tlsRpcServer        (from unitTest.TlsRpcServer,    to tlsRpcServer.TlsRpcServer);
        connection seL4RPCCall      testTls_TlsApi              (from unitTest.TlsLibServer,    to tlsRpcServer.TlsLibServer);
        connection seL4SharedData   tlsDataport                 (from unitTest.TlsLibDataport,  to tlsRpcServer.TlsLibDataport);
    }

    configuration {
        uartDev.uartRegBase_paddr  = 0xE0000000;
        uartDev.uartRegBase_size   = 0x1000;
        uartDrv.inputDataPort       = "R";

        timerBase.reg_paddr = 0xF8001000;   // paddr of mmio registers
        timerBase.reg_size = 0x1000;        // size of mmio registers
        timerBase.irq_irq_number = 42;      // timer irq number

        /* assign an initial value to semaphore */
        timer.sem_value = 0;

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        nwDriver_1.ChanMuxRpc_attributes = 1;
        nwDriver_2.ChanMuxRpc_attributes = 2;
    }
}
