import <std_connector.camkes>;

import "components/ChanMux/ChanMux.camkes";
import "components/NwStack/NwStack_Tap0.camkes";
import "components/NwStack/NwStack_Tap1.camkes";
import "components/UART/Uart.camkes";
import "components/Timer/Timer.camkes";
import "components/TimerClient/TimerClient.camkes";
import "components/TEST_TLS/TEST_TLS.camkes";
import "components/TlsRpcServer/TlsRpcServer.camkes";

assembly {
    composition {
        //----------------------------------------------------------------------
        // Network Stacks
        //----------------------------------------------------------------------
        component  NwStack_Tap0     nwStack;
        component  NwStack_Tap1     nwStack_2;

        connection seL4RPCCall      nwStack_chanmux         (from nwStack.ChanMux,      to chanMux.ChanMuxNwStack);
        connection seL4RPCCall      nwStack_2_chanmux       (from nwStack_2.ChanMux,    to chanMux.ChanMuxNwStack);

        //----------------------------------------------------------------------
        // TLS Test application
        //----------------------------------------------------------------------
        component  TEST_TLS         testTls;

        connection seL4RPCCall      testTls_nwStack            (from testTls.seos,      to nwStack.seos);

        //----------------------------------------------------------------------
        // TLS RPC server for running TLS in component
        //----------------------------------------------------------------------
        component  TlsRpcServer     tlsRpcServer;

        connection seL4RPCCall      testTls_tlsRpcServer        (from testTls.TlsRpcServer, to tlsRpcServer.TlsRpcServer);
        connection seL4RPCCall      testTls_seosTlsRpcServer    (from testTls.SeosTlsRpcServer, to tlsRpcServer.SeosTlsRpcServer);
        connection seL4SharedData   tlsDataport                 (from testTls.tlsClientDataport, to tlsRpcServer.tlsServerDataport);

        connection seL4RPCCall      tlsRpcServer_nwStack_2      (from tlsRpcServer.seos,            to nwStack_2.seos);

        //----------------------------------------------------------------------
        // MUX
        //----------------------------------------------------------------------
        component ChanMux           chanMux;

        connection seL4RPCCall      chanmux_uart                    (from chanMux.Output, to uartDrv.UartDrv);
        connection seL4SharedData   uart_dataConnection             (from chanMux.outputDataPort, to uartDrv.inputDataPort);

        //----------------------------------------------------------------------
        // UART
        //----------------------------------------------------------------------
        component  UartDev          uartDev;
        component  UartDrv          uartDrv;

        connection seL4HardwareMMIO uart_memio      (from uartDrv.uartRegBase,  to uartDev.uartRegBase);
        connection seL4RPCCall      uart_chanmux    (from uartDrv.Output,       to chanMux.ChanMuxOut);

        //----------------------------------------------------------------------
        // TIMER
        //----------------------------------------------------------------------
        component Timerbase     timerBase;
        component Timer         timer;
        component TimerClient   timerClient;

        connection seL4HardwareMMIO         timer_mem           (from timer.reg, to timerBase.reg);
        connection seL4HardwareInterrupt    timer_irq           (from timerBase.irq, to timer.irq);

        connection seL4RPCCall timerclient_timer        (from timerClient.Timer,    to timer.Timer);
        connection seL4RPCCall nwStack_timerClient      (from nwStack.Timer,        to timerClient.TimerClient);
        connection seL4RPCCall nwStack2_timerClient     (from nwStack_2.Timer,      to timerClient.TimerClient);

        //----------------------------------------------------------------------
        // Network stack channels
        //----------------------------------------------------------------------

        // Channel Network Stack
        connection seL4SharedData         NwStack_dataConnection   (from nwStack.chanMuxDataPort,               to chanMux.nwStackDataPort);
        connection seL4SharedData         NwStack_ctrlConnection   (from nwStack.chanMuxCtrlDataPort,           to chanMux.nwStackCtrlDataPort);
        connection seL4SharedData         testTls_dataConnection   (from testTls.NwAppDataPort,                 to nwStack.NwAppDataPort);
        connection seL4NotificationNative NwStackdataAvail1        (from chanMux.e_read_nwstacktick,            to nwStack.c_nwstacktick);
        connection seL4NotificationNative NwStackdataAvail2        (from nwStack.e_write_nwstacktick,           to nwStack.c_nwstacktick);
        connection seL4NotificationNative NwStackdataAvail3        (from timerClient.e_timeout_nwstacktick,     to nwStack.c_nwstacktick);
        connection seL4Notification       NwStackEventsRxd1        (from nwStack.e_write,                       to nwStack.c_write);
        connection seL4Notification       NwStackEventsRxd2        (from nwStack.e_read,                        to nwStack.c_read);
        connection seL4Notification       NwAppInitDone            (from nwStack.e_initdone,                    to nwStack.c_initdone);

        // Channel Network Stack 2
        connection seL4SharedData         NwStack_dataConnection_2      (from nwStack_2.chanMuxDataPort_2,           to chanMux.nwStackDataPort_2);
        connection seL4SharedData         NwStack_ctrlConnection_2      (from nwStack_2.chanMuxCtrlDataPort_2,       to chanMux.nwStackCtrlDataPort_2);
        connection seL4SharedData         tlsRpcServer_dataConnection_2 (from tlsRpcServer.NwAppDataPort,            to nwStack_2.NwAppDataPort_2);
        connection seL4NotificationNative NwStackdataAvail1_2           (from chanMux.e_read_nwstacktick_2,          to nwStack_2.c_nwstacktick_2);
        connection seL4NotificationNative NwStackdataAvail2_2           (from nwStack_2.e_write_nwstacktick_2,       to nwStack_2.c_nwstacktick_2);
        connection seL4NotificationNative NwStackdataAvail3_2           (from timerClient.e_timeout_nwstacktick_2,   to nwStack_2.c_nwstacktick_2);
        connection seL4Notification       NwStackEventsRxd1_2           (from nwStack_2.e_write_2,                   to nwStack_2.c_write_2);
        connection seL4Notification       NwStackEventsRxd2_2           (from nwStack_2.e_read_2,                    to nwStack_2.c_read_2);
        connection seL4Notification       NwStackEventsRxd3_2           (from nwStack_2.e_conn_2,                    to nwStack_2.c_conn_2);
        connection seL4Notification       NwAppInitDone_2               (from nwStack_2.e_initdone_2,                to nwStack_2.c_initdone_2);
    }

    configuration {
        uartDev.uartRegBase_paddr   = 0xE0000000;
        uartDev.uartRegBase_size    = 0x1000;
        uartDrv.inputDataPort       = "R";

        timerBase.reg_paddr         = 0xF8001000;
        timerBase.reg_size          = 0x1000;
        timerBase.irq_irq_number    = 42;

        timer.sem_value = 0;
    }
}
