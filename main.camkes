import <std_connector.camkes>;

import <if_OS_EntropySource.camkes>;

import "components/NwStack/network_stack.camkes";
import "components/Timer/Timer.camkes";
import "components/TimerClient/TimerClient.camkes";
import "components/TlsRpcServer/TlsRpcServer.camkes";

import "components/Tests/test_OS_Tls.camkes";

#include "config/SystemConfig.h"

#include "UART/Uart.camkes"
DECLARE_COMPONENT_UART(UART)

#include "NIC_ChanMux/NIC_ChanMux.camkes"
DECLARE_COMPONENT_NIC_ChanMux(NwDriver1)
DECLARE_COMPONENT_NIC_ChanMux(NwDriver2)

#include "ChanMux/ChanMux.camkes"
ChanMux_DEFINE_COMPONENT(ChanMux,
        nwDriver1, ctrl,
        nwDriver1, data,
        nwDriver2, ctrl,
        nwDriver2, data)

#include "EntropySource/camkes/EntropySource.camkes"
DECLARE_COMPONENT_EntropySource(EntropySource)

assembly {
    composition {
        //----------------------------------------------------------------------
        // UART
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_UART(
            UART, uartDrv)

        //----------------------------------------------------------------------
        // MUX
        //----------------------------------------------------------------------
        ChanMux_DECLARE_AND_CONNECT_INSTANCE_TO_UART(ChanMux, chanMux, uartDrv)

        //----------------------------------------------------------------------
        // Timer
        //----------------------------------------------------------------------
        component  Timerbase             timerBase;
        component  Timer                 timer;
        component  TimerClient           timerClient;

        connection seL4HardwareMMIO      timer_mem            (from timer.reg,         to timerBase.reg);
        connection seL4HardwareInterrupt timer_irq            (from timerBase.irq,     to timer.irq);
        connection seL4RPCCall           timerClient_timer    (from timerClient.Timer, to timer.Timer);
        connection seL4RPCCall           nwStack_timerClient  (from nwStack1.Timer,   to timerClient.TimerClient);
        connection seL4RPCCall           nwStack2_timerClient (from nwStack2.Timer,   to timerClient.TimerClient);

        //----------------------------------------------------------------------
        // Network Driver #1
        //----------------------------------------------------------------------
        component  NwDriver1       nwDriver1;

        ChanMux_INSTANCE_CONNECT_INTERFACE(chanMux, nwDriver1)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver1, data)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver1, ctrl)

        //----------------------------------------------------------------------
        // Network Stack #1
        //----------------------------------------------------------------------
        component  NwStack1               nwStack1;

        connection seL4NotificationNative NwStackdataAvail2 (from nwStack1.event_internal, to nwStack1.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1 (from nwStack1.e_write,        to nwStack1.c_write);
        connection seL4Notification       NwStackEventsRxd2 (from nwStack1.e_read,         to nwStack1.c_read);
        connection seL4Notification       NwStackEventsRxd3 (from nwStack1.e_conn,         to nwStack1.c_conn);

        connection seL4NotificationNative NwStackdataAvail3 (from timerClient.e_timeout_nwstacktick_1, to nwStack1.event_tick_or_data);

        connection seL4NotificationNative NwStackdataAvail1                (from nwDriver1.nic_event_hasData,     to nwStack1.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver                 (from nwStack1.nic_driver,             to nwDriver1.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection  (from nwDriver1.nic_port_to,           to nwStack1.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection (from nwDriver1.nic_port_from,         to nwStack1.port_nic_to);

        //----------------------------------------------------------------------
        // Network Stack App #1
        //----------------------------------------------------------------------
        component  test_OS_Tls      unitTest;

        connection seL4Notification NwAppInitDone        (from nwStack1.event_network_init_done,  to unitTest.event_network_stack_init_done);
        connection seL4RPCCall      NwApp_nwStack        (from unitTest.network_stack_rpc,         to nwStack1.network_stack_rpc);
        connection seL4SharedData   NwApp_dataConnection (from unitTest.NwAppDataPort,             to nwStack1.port_app_io);

        DECLARE_AND_CONNECT_INSTANCE_EntropySource(
            EntropySource,
            entropySource0,
            unitTest.entropySource_rpc,
            unitTest.entropySource_dp)

        //----------------------------------------------------------------------
        // Network Driver #2
        //----------------------------------------------------------------------
        component  NwDriver2        nwDriver2;

        ChanMux_INSTANCE_CONNECT_INTERFACE(chanMux, nwDriver2)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver2, data)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver2, ctrl)

        //----------------------------------------------------------------------
        // Network Stack #2
        //----------------------------------------------------------------------
        component  NwStack2               nwStack2;

        connection seL4NotificationNative NwStackdataAvail2_2 (from nwStack2.event_internal, to nwStack2.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1_2 (from nwStack2.e_write,        to nwStack2.c_write);
        connection seL4Notification       NwStackEventsRxd2_2 (from nwStack2.e_read,         to nwStack2.c_read);
        connection seL4Notification       NwStackEventsRxd3_2 (from nwStack2.e_conn,         to nwStack2.c_conn);

        connection seL4NotificationNative NwStackdataAvail3_2 (from timerClient.e_timeout_nwstacktick_2,  to nwStack2.event_tick_or_data);

        connection seL4NotificationNative NwDriver_NwStack_dataAvail_2       (from nwDriver2.nic_event_hasData,     to nwStack2.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver2                 (from nwStack2.nic_driver,             to nwDriver2.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection_2  (from nwDriver2.nic_port_to,           to nwStack2.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection_2 (from nwDriver2.nic_port_from,         to nwStack2.port_nic_to);

        //----------------------------------------------------------------------
        // Network Stack App #2
        //----------------------------------------------------------------------
        component  TlsRpcServer     tlsRpcServer;

        connection seL4Notification NwAppInitDone_2        (from nwStack2.event_network_init_done,     to tlsRpcServer.event_network_stack_init_done);
        connection seL4RPCCall      NwApp_nwStack2        (from tlsRpcServer.network_stack_rpc,        to nwStack2.network_stack_rpc);
        connection seL4SharedData   NwApp_dataConnection_2 (from tlsRpcServer.NwAppDataPort,            to nwStack2.port_app_io);

        DECLARE_AND_CONNECT_INSTANCE_EntropySource(
            EntropySource,
            entropySource1,
            tlsRpcServer.entropySource_rpc,
            tlsRpcServer.entropySource_dp)

        //----------------------------------------------------------------------
        // Connecting TEST_TLS to tlsRpcServer
        //----------------------------------------------------------------------
        connection seL4RPCCall      testTls_tlsRpcServer        (from unitTest.TlsRpcServer,    to tlsRpcServer.TlsRpcServer);
        connection seL4RPCCall      testTls_TlsApi              (from unitTest.TlsLibServer,    to tlsRpcServer.TlsLibServer);
        connection seL4SharedData   tlsDataport                 (from unitTest.TlsLibDataport,  to tlsRpcServer.TlsLibDataport);
    }

    configuration {
        CONFIGURE_INSTANCE_UART(
            uartDrv,
            CFG_CHANMUX_DEFAULT_UART_PHYS_ADDR,
            CFG_CHANMUX_DEFAULT_UART_INTR)

        timerBase.reg_paddr = 0xF8001000;   // paddr of mmio registers
        timerBase.reg_size = 0x1000;        // size of mmio registers
        timerBase.irq_irq_number = 42;      // timer irq number

        /* assign an initial value to semaphore */
        timer.sem_value = 0;

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        ChanMux_ASSIGN_CLIENT_BADGE(chanMux, nwDriver1, CHANMUX_ID_NIC_1)
        ChanMux_ASSIGN_CLIENT_BADGE(chanMux, nwDriver2, CHANMUX_ID_NIC_2)
    }
}
