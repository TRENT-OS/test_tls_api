/*
 * Test TLS API System
 *
 * Copyright (C) 2020-2021, HENSOLDT Cyber GmbH
 *
 */

#include "config/SystemConfig.h"
import <std_connector.camkes>;

#include "NIC_ChanMux/NIC_ChanMux.camkes"
NIC_ChanMux_COMPONENT_DEFINE(NwDriver, NIC_DRIVER_RINGBUFFER_SIZE)

#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    nwDriver, ctrl,
    nwDriver, data
)

import <if_OS_Entropy.camkes>;
#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "os_network_stack/network_stack.camkes"
NwStack_COMPONENT_DEFINE(
    NwStack,
    NIC_DRIVER_RINGBUFFER_SIZE,
    1,
    NwStack_NO_ADDITIONAL_INTERFACES)

import "components/Ticker/Ticker.camkes";
import "components/Tests/test_OS_Tls.camkes";


assembly {
    composition {
        //----------------------------------------------------------------------
        // ChanMux_UART + UART
        //----------------------------------------------------------------------
        component ChanMux_UART chanMux_UART;
        component UART_CHANMUX uart;
        ChanMux_UART_INSTANCE_CONNECT(chanMux_UART, uart)

        //----------------------------------------------------------------------
        // Ticker
        //----------------------------------------------------------------------
        component Ticker ticker;

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc,  ticker.timeServer_notify,
            nwStack.timeServer_rpc, nwStack.timeServer_notify
        )

        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        component NwDriver nwDriver;

        ChanMux_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            nwDriver, data, ctrl
        )

        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component NwStack nwStack;

        NwStack_INSTANCE_CONNECT(
            nwStack,
            ticker.e_timeout_nwstacktick
        )

        NIC_ChanMux_INSTANCE_CONNECT_CLIENT(
            nwDriver,
            nwStack.nic_rpc,
            nwStack.nic_to_port,
            nwStack.nic_from_port,
            nwStack.event_tick_or_data
        )

        //----------------------------------------------------------------------
        // TLS UnitTest App
        //----------------------------------------------------------------------
        component test_OS_Tls unitTest;

        NwStack_INSTANCE_CONNECT_SOCKET(
            nwStack,
            1,
            unitTest.networkStack_rpc,
            unitTest.networkStack_port)

        //----------------------------------------------------------------------
        // Entropy Source
        //----------------------------------------------------------------------
        component EntropySource entropySource;

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource,
            unitTest.entropy_rpc,
            unitTest.entropy_port
        )
    }

    configuration {
        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            nwStack.timeServer_rpc
        )

        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            nwDriver.chanMux_Rpc
        )
    }
}
