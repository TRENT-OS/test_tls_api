/*
 * Test TLS API System
 *
 * Copyright (C) 2020-2021, HENSOLDT Cyber GmbH
 *
 */

import <if_OS_Entropy.camkes>;

import "components/NwStack/network_stack.camkes";
import "components/Ticker/Ticker.camkes";

import "components/Tests/test_OS_Tls.camkes";

#include "config/SystemConfig.h"

#include "NIC_ChanMux/NIC_ChanMux.camkes"
NIC_ChanMux_COMPONENT_DEFINE(NwDriver, NIC_DRIVER_RINGBUFFER_SIZE)

#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    nwDriver, ctrl,
    nwDriver, data
)

#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

assembly {
    composition {
        //----------------------------------------------------------------------
        // ChanMux_UART + UART
        //----------------------------------------------------------------------
        component ChanMux_UART chanMux_UART;
        component UART_CHANMUX uart;

        ChanMux_UART_INSTANCE_CONNECT(
            chanMux_UART,
            uart
        )

        //----------------------------------------------------------------------
        // Ticker
        //----------------------------------------------------------------------
        component  Ticker ticker;

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc,   ticker.timeServer_notify,
            nwStack.timeServer_rpc, nwStack.timeServer_notify)

        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        component  NwDriver       nwDriver;

        ChanMux_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            nwDriver, data, ctrl
        )

        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component  NwStack                nwStack;

        connection seL4NotificationNative NwStackdataAvail (from nwStack.event_internal, to nwStack.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1 (from nwStack.e_write,        to nwStack.c_write);
        connection seL4Notification       NwStackEventsRxd2 (from nwStack.e_read,         to nwStack.c_read);
        connection seL4Notification       NwStackEventsRxd3 (from nwStack.e_conn,         to nwStack.c_conn);

        connection seL4NotificationNative NwStack_tick     (from ticker.e_timeout_nwstacktick, to nwStack.event_tick_or_data);

        NIC_ChanMux_INSTANCE_CONNECT_CLIENT(
            nwDriver,
            nwStack.nic_driver,  nwStack.nic_to_port, nwStack.nic_from_port, nwStack.event_tick_or_data
        )

        //----------------------------------------------------------------------
        // Network Stack App
        //----------------------------------------------------------------------
        component  test_OS_Tls      unitTest;

        connection seL4RPCCall      NwApp_nwStack        (from unitTest.networkStack_rpc,  to nwStack.networkStack_rpc);
        connection seL4SharedData   NwApp_dataConnection (from unitTest.networkStack_port, to nwStack.appIo_port);

        component  EntropySource    entropySource;

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource,
            unitTest.entropy_rpc,
            unitTest.entropy_port)
    }

    configuration {
        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            nwStack.timeServer_rpc
        )

        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            nwDriver.chanMux_Rpc
        )
    }
}
